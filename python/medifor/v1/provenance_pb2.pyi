# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from medifor.v1.analytic_pb2 import (
    Resource as medifor___v1___analytic_pb2___Resource,
)

from typing import (
    Iterable as typing___Iterable,
    List as typing___List,
    Optional as typing___Optional,
    Text as typing___Text,
    Tuple as typing___Tuple,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class LinkType(int):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    @classmethod
    def Name(cls, number: int) -> str: ...
    @classmethod
    def Value(cls, name: str) -> LinkType: ...
    @classmethod
    def keys(cls) -> typing___List[str]: ...
    @classmethod
    def values(cls) -> typing___List[LinkType]: ...
    @classmethod
    def items(cls) -> typing___List[typing___Tuple[str, LinkType]]: ...
    SPLICE = typing___cast(LinkType, 0)
    PROVENANCE = typing___cast(LinkType, 1)
    SPEAKER = typing___cast(LinkType, 2)
    CAMERA = typing___cast(LinkType, 3)
    LOCATION = typing___cast(LinkType, 4)
SPLICE = typing___cast(LinkType, 0)
PROVENANCE = typing___cast(LinkType, 1)
SPEAKER = typing___cast(LinkType, 2)
CAMERA = typing___cast(LinkType, 3)
LOCATION = typing___cast(LinkType, 4)

class ProvenanceFilteringRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    request_id = ... # type: typing___Text
    result_limit = ... # type: int

    @property
    def image(self) -> medifor___v1___analytic_pb2___Resource: ...

    def __init__(self,
        *,
        request_id : typing___Optional[typing___Text] = None,
        image : typing___Optional[medifor___v1___analytic_pb2___Resource] = None,
        result_limit : typing___Optional[int] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> ProvenanceFilteringRequest: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"image"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"image",u"request_id",u"result_limit"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"image",b"image"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"image",b"image",u"request_id",b"request_id",u"result_limit",b"result_limit"]) -> None: ...

class ImageMatch(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    image_id = ... # type: typing___Text
    score = ... # type: float

    @property
    def matching_image(self) -> medifor___v1___analytic_pb2___Resource: ...

    def __init__(self,
        *,
        image_id : typing___Optional[typing___Text] = None,
        matching_image : typing___Optional[medifor___v1___analytic_pb2___Resource] = None,
        score : typing___Optional[float] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> ImageMatch: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"matching_image"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"image_id",u"matching_image",u"score"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"matching_image",b"matching_image"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"image_id",b"image_id",u"matching_image",b"matching_image",u"score",b"score"]) -> None: ...

class FilteringResult(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def matches(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[ImageMatch]: ...

    @property
    def probe(self) -> medifor___v1___analytic_pb2___Resource: ...

    def __init__(self,
        *,
        matches : typing___Optional[typing___Iterable[ImageMatch]] = None,
        probe : typing___Optional[medifor___v1___analytic_pb2___Resource] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> FilteringResult: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"probe"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"matches",u"probe"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"probe",b"probe"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"matches",b"matches",u"probe",b"probe"]) -> None: ...

class ProvenanceGraphRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    request_id = ... # type: typing___Text

    @property
    def image(self) -> medifor___v1___analytic_pb2___Resource: ...

    @property
    def filter_results(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[ImageMatch]: ...

    def __init__(self,
        *,
        request_id : typing___Optional[typing___Text] = None,
        image : typing___Optional[medifor___v1___analytic_pb2___Resource] = None,
        filter_results : typing___Optional[typing___Iterable[ImageMatch]] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> ProvenanceGraphRequest: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"image"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"filter_results",u"image",u"request_id"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"image",b"image"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"filter_results",b"filter_results",u"image",b"image",u"request_id",b"request_id"]) -> None: ...

class Association(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    type = ... # type: LinkType
    source = ... # type: typing___Text
    target = ... # type: typing___Text
    score = ... # type: float
    explanation = ... # type: typing___Text

    def __init__(self,
        *,
        type : typing___Optional[LinkType] = None,
        source : typing___Optional[typing___Text] = None,
        target : typing___Optional[typing___Text] = None,
        score : typing___Optional[float] = None,
        explanation : typing___Optional[typing___Text] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> Association: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"explanation",u"score",u"source",u"target",u"type"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"explanation",b"explanation",u"score",b"score",u"source",b"source",u"target",b"target",u"type",b"type"]) -> None: ...

class Node(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    image_id = ... # type: typing___Text
    score = ... # type: float

    def __init__(self,
        *,
        image_id : typing___Optional[typing___Text] = None,
        score : typing___Optional[float] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> Node: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"image_id",u"score"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"image_id",b"image_id",u"score",b"score"]) -> None: ...

class ProvenanceGraph(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    opt_out = ... # type: bool

    @property
    def nodes(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[Node]: ...

    @property
    def associations(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[Association]: ...

    def __init__(self,
        *,
        nodes : typing___Optional[typing___Iterable[Node]] = None,
        associations : typing___Optional[typing___Iterable[Association]] = None,
        opt_out : typing___Optional[bool] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> ProvenanceGraph: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"associations",u"nodes",u"opt_out"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"associations",b"associations",u"nodes",b"nodes",u"opt_out",b"opt_out"]) -> None: ...
